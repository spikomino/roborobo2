#!/bin/bash
###############################################################################
# This hook is the command that is executed every run.
# Check the examples in examples/
#
# This hook is run in the execution directory (execDir, --exec-dir),
# the same directory where hook-evaluate is executed. Hence, you may
# need to copy extra files needed by the executable to this directory.
#
#
# PARAMETERS:
# $1 is the instance name
# $2 is the candidate number
# The rest ($* after `shift 2') are parameters to the run
#
# RETURN VALUE:
# This hook should print one numerical value: the cost that must be minimized.
# Exit with 0 if no error, with 1 in case of error
###############################################################################
EXE=./config/irace/wrapper-roborobo-odN-n
FIXED_PARAMS=""
INSTANCE=$1
CANDIDATE=$2
shift 2 || exit 1
CAND_PARAMS=$*

STDOUT=config/irace/c${CANDIDATE}.stdout
STDERR=config/irace/c${CANDIDATE}.stderr

# If the program just prints a number, we can use 'exec' to avoid
# creating another process, but there can be no other commands after exec.
#exec $EXE ${FIXED_PARAMS} -i $INSTANCE ${CAND_PARAMS}
# exit 1
# 
# Otherwise, save the output to a file, and parse the result from it.
# (If you wish to ignore segmentation faults you can use '{}' around
# the command.)
$EXE ${FIXED_PARAMS} -i $INSTANCE -c ${CANDIDATE} ${CAND_PARAMS} 1> ${STDOUT} 2> ${STDERR}

error() {
    echo "`TZ=UTC date`: error: $@"
    exit 1
}

# # This may be used to introduce a delay if there are filesystem
# # issues.
# SLEEPTIME=1
# while [ ! -s "${STDOUT}" ]; do
#     sleep $SLEEPTIME
#     let "SLEEPTIME += 1"
# done

# This is an example of reading a number from the output.
# It assumes that the objective value is the first number in
# the first column of the only line starting with a digit.
if [ -s "${STDOUT}" ]; then
    COST=$(cat ${STDOUT} | grep -e '^[[:space:]]*[+-]\?[0-9]' | cut -f1)
    echo "$COST"
    rm -f "${STDOUT}" "${STDERR}"
    exit 0
else
    error "${STDOUT}: No such file or directory"
fi
